<?php
/**
 * Created by PhpStorm.
 * User: john
 * Date: 27.3.16
 * Time: 15:12
 */


namespace App\Presenters;

use Nette;
use App\Model;
use Nette\Application\UI;
use Curse\Smite;
use Nextras\Forms\Rendering\Bs3FormRenderer;
use PavelMaca\Captcha\CaptchaControl;
use IPub\VisualPaginator\Components as VisualPaginator;

class ForumPresenter extends BasePresenter
{
    /** @var Nette\Database\Context */
    private $database;


    public function __construct(Nette\Database\Context $database)
    {
        $this->database = $database;
    }

    public function renderDefault()
    {
        $this->template->mainName = "Forum";
        $posts = $this->database->table('posts')
            ->order('created_at DESC');
        $this->template->posts = $posts;

        $this->template->name = $this->getUser()->getRoles()[0];

        $arr = array();
        foreach ($posts as $comment)
        {
            $arr[$comment['author']] = $this->database->table('users')->where('id', $comment['author'])->fetch()['name'];
        }
        $this->template->arr = $arr;



        // Get visual paginator components
        $visualPaginator = $this['visualPaginator'];
        // Get paginator form visual paginator
        $paginator = $visualPaginator->getPaginator();
        // Define items count per one page
        $paginator->itemsPerPage = 50;
        // Define total items in list
        $paginator->itemCount = $posts->count();
        // Apply limits to list
        $posts->limit($paginator->itemsPerPage, $paginator->offset);
    }

    protected function createComponentCommentForm() // basic form and captcha for forum
    {
        $session = $this->getSession();

        CaptchaControl::register($session);
        //Nette\Forms\Form::extensionMethod('addCaptcha', callback(new \Captcha, "addCaptcha"));


        $form = new UI\Form;
        $form->setRenderer(new Bs3FormRenderer());
        $form->addText('title', 'Title:')
            ->setRequired()->addRule(\Nette\Forms\Form::MAX_LENGTH, 'Title cannot be more than %d characters long.', 255);
        $form->addTextArea('content', 'Comment:')
            ->setRequired()->addRule(\Nette\Forms\Form::MAX_LENGTH, 'Message cannot be more than %d characters long.', 255);

        $form->addCaptcha('captcha')
            ->addRule(\Nette\Forms\Form::FILLED, "Rewrite text from image.")
            ->addRule($form["captcha"]->getValidator(), 'Try it again.')
            ->setFontSize(13)
            ->setLength(7) //word length
            ->setTextMargin(20) //px, set text margin on left and right side
            ->setTextColor(\Nette\Utils\Image::rgb(255,0,0)) //array("red" => 0-255, "green" => 0-255, "blue" => 0-255)
            ->setBackgroundColor(\Nette\Utils\Image::rgb(255,255,255)) //array("red" => 0-255, "green" => 0-255, "blue" => 0-255)
            ->setImageHeight(50) //px, if not set (0), image height will be generated by font size
            ->setImageWidth(0) //px, if not set (0), image width will be generated by font size
            //->setExpire(10000 ) //ms, set expiration time to session
            ->setFilterSmooth(false) //int or false (disable)
            ->setFilterContrast(false)  //int or false (disable)
            ->useNumbers(true)->addRule(\Nette\Forms\Form::MAX_LENGTH, "max length is 7", 7);
        $form->addSubmit('send', 'Send');
        $form->onValidate[] = array($this, 'validation');
        $form->onSuccess[] = array($this, 'postFormSucceeded');

        return $form;
    }

    /**
     * Create items paginator
     *
     * @return VisualPaginator\Control
     */
    protected function createComponentVisualPaginator() // pagination
    {
        // Init visual paginator
        $control = new VisualPaginator\Control;
        $control->setTemplateFile('bootstrap.latte');
        return $control;
    }


    public function postFormSucceeded($form, $values)
    {
        $isBanned = $this->database->table('users')->where('id', $this->getUser()->getId())->fetch();

        if (!$this->getUser()->isLoggedIn())
        {
            $this->error('You must be logged in before you can post comments.'); // error when posting
        }
        else if ($isBanned['banned'] == 1)
        {
            $this->error('You are banned and therefore cannot post here.');
        }
        else
        {
            $values['author'] = $this->getUser()->getId();
            $values['ip'] = $_SERVER['REMOTE_ADDR'];

            unset($values['captcha']);
            unset($values['_uid_captcha']);

            $post = $this->database->table('posts')->insert($values);

            $this->flashMessage("Post sent successfully.", 'success');
            $this->redirect('this');
        }

    }

    public function validation($form)
    {
        $ya = $this->database->table('posts')->order('id DESC')->fetch();
        $time = $ya['created_at'];

        $today = new \Nette\Utils\DateTime();
        $fromdb = \Nette\Utils\DateTime::from($time);

        $diff = $today->getTimestamp() - $fromdb->getTimestamp();
        if ($diff < 30)
        {
            $form->addError('You cannot post so fast. Try in 30 seconds.');
        }

       // $created = \Nette\Utils\DateTime::createFromFormat('n/j/Y g:i:s A', $playerData[0]['Created_Datetime'])->getTimestamp();
    }
}
